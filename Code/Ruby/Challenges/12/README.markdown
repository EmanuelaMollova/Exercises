# Шарлатанство

Изберете си число между 1 и 10. Умножете това число по 2. Умножете полученото
по 5. Разделете новия резултат на числото, което бяхте избрали първоначално.
Извадете 7 от новия резултат.

Абракадабра!

Получихте 3, нали?

Всички сме чували/представяли такива трикове, дори сме бивали дълбоко
впечатлявани от тях, когато сме били невръстни. Разбира се, тестването на
достоверността на тези трикове би било по-лесно, ако се напише малко код. Един
изключително полезен съвет от книгата "[The Pragmatic Programmer: From
Journeyman to Master](http://pragprog.com/the-pragmatic-programmer)" e:

> [Program close to the problem domain](http://pragmatictips.com/17)

Да опитаме.

Искаме да създадем мини-език, a.k.a.
[DSL](http://en.wikipedia.org/wiki/Domain-specific_language) в който
„операторите“ са манипулациите с числа, близки до естествения език, с който
бихме описали трика. Например, трикът, който представихме в началото, може да
бъде записан и проверен по следния начин:

    Charlatan.trick do
      pick_from 1..10
      multiply_by 2
      multiply_by 5
      divide_by :your_number
      subtract 7
      you_should_get 3
    end

За целите на това предизвикателство, ще приемем, че горният код е по-четим
заради близостта си до "проблемната област" (domain), от този:

    (1..10).all? do |number|
      ((number * 2 * 5) / number) - 7 == 3
    end

Затова, създайте модул `Charlatan`, в който има метод `Charlatan.trick`, приемащ
блок, който дефинира „проверяваща програма“ от следния вид:

1. `pick_from <range>` – задава интервал от цели числа, за които ще тестваме
   дали трикът работи. Приема само области от числа.
2. Числови манипулации, които могат да бъдат извършвани върху предходния
   резултат:
   * `add <number>` – добавя число към текущия резултат.
   * `subtract <number>` – изважда число от текущия резултат.
   * `multiply_by <number>` – умножава текущия резултат по число.
   * `divide_by <number>` – Разделя (целочислено) текущия резултат на число.
3. `you_should_get <number>` – последният ред на програмата указва числото,
   което трябва да бъде „разпознато“ от шарлатана в края на трика.

Вместо число, на всички операции без `pick_from`, може да се подаде символът
`:your_number`, който трябва да представлява стойността на първоначално
избраното число.

Изпълнението на `Charlatan.trick` трябва да връща `true`, или `false`, в
зависимост от това дали манипулациите върху всяко число от областта са довели
до числото, подадено като аргумент на `you_should_get`.

Примери:

    Charlatan.trick do
      pick_from 1..1
      add 1
      you_should_get 2
    end                    # => true

    Charlatan.trick do
      pick_from 1..2
      add 2
      subtract 2
      you_should_get :your_number
    end                    # => true

    Charlatan.trick do
      pick_from 10..100
      multiply_by 3
      you_should_get 1000
    end                    # => false

**Забележка:** Подадените на `Charlatan.trick` програми ще бъдат коректни,
всички ще започват с `pick_from` и ще завършват с `you_should_get`. Също така,
няма да се подават некоректни данни, както сме казвали много пъти досега.

Ако изпитвате затруднения да измислите как да реализирате този DSL, питайте във
форума или ни [пишете](/team).
